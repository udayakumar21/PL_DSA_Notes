oops
Encapsulation
#include <iostream>
#include <string>
using namespace std;

// Class definition
class Employee {
private:
    string name;    // Private member variable
    int salary;     // Private member variable

public:
    // Constructor with parameters
    Employee(string n, int s) {
        name = n;
        salary = s;
    }

    // Getter method for salary
    int getSalary() {
        return salary;
    }

    // Setter method for salary
    void setSalary(int s) {
        if (s > 0) {
            salary = s;
        }
    }

    // Method to display employee details
    void display() {
        cout << "Name: " << name << ", Salary: $" << salary << endl;
    }
};

// Main function
int main() {
    // Create an Employee object
    Employee emp("John", 50000);
    
    // Display initial details
    emp.display();

    // Update salary using setter method
    emp.setSalary(60000);
    cout << "Updated Salary: $" << emp.getSalary() << endl;

    return 0;
}

2)
Polymorphism, Overloading, and Overriding
#include <iostream>
using namespace std;

// Base class
class Shape {
public:
    // Virtual function for polymorphism
    virtual void draw() {
        cout << "Drawing shape" << endl;
    }
};

// Derived class (Circle)
class Circle : public Shape {
public:
    // Override base class function
    void draw() override {
        cout << "Drawing circle" << endl;
    }
};

// Function overloading example
void print(int x) {
    cout << "Printing integer: " << x << endl;
}

void print(double x) {
    cout << "Printing double: " << x << endl;
}

// Main function
int main() {
    // Polymorphism example
    Shape *shape = new Circle();
    shape->draw(); // Calls Circle's draw() due to polymorphism

    // Function overloading example
    print(10);
    print(3.14);

    return 0;
}


3) Abstraction
#include <iostream>
using namespace std;

// Abstract class (Shape)
class Shape {
public:
    // Pure virtual function (abstract method)
    virtual void draw() = 0;
};

// Derived classes (Circle and Rectangle)
class Circle : public Shape {
public:
    // Override pure virtual function
    void draw() override {
        cout << "Drawing circle" << endl;
    }
};

class Rectangle : public Shape {
public:
    // Override pure virtual function
    void draw() override {
        cout << "Drawing rectangle" << endl;
    }
};

// Main function
int main() {
    // Abstraction example
    Shape *shape1 = new Circle();
    Shape *shape2 = new Rectangle();

    shape1->draw();
    shape2->draw();

    return 0;
}
4)Inheritance
#include <iostream>
#include <string>
using namespace std;

// Base class (Animal)
class Animal {
protected:
    string name;    // Protected member variable

public:
    // Constructor with parameter
    Animal(string n) : name(n) {}

    // Method (speak)
    void speak() {
        cout << "Animal speaks" << endl;
    }
};

// Derived class (Dog) inherits Animal
class Dog : public Animal {
public:
    // Constructor with parameter
    Dog(string n) : Animal(n) {}

    // Override base class method
    void speak() {
        cout << "Dog barks: Woof!" << endl;
    }
};

// Main function
int main() {
    // Inheritance example
    Dog myDog("Buddy");
    myDog.speak(); // Calls Dog's speak() method

    return 0;
}
