#include <iostream>
using namespace std;

class node{
    
    public:
    
    int data;
    node* next;
    node(int val){
        data=val;
        next=NULL;
    }
};
void insertAtTail(node* &head,int val){
    node* n=new node(val);
    if(head==NULL){
        head=n;
        return;
    }
    node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}
void diplay(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL";
}

void insertAtHead(node* &head, int val){
    node* n=new node(val);
    n->next=head;
    head=n;
}

bool search(node* head,int key){
    node* temp=head;
    while(temp!=NULL){
        if(temp->data==key){
            return true;
        }
        temp=temp->next;
    }
    return false;
}

void deletion(node* &head, int val){
    node* temp=head;
    while(temp->next->data!=val){
        temp=temp->next;
    }
    node* todelete=temp->next;
    temp->next=temp->next->next;
    delete todelete;
}
void deleteAtHead(node* &head){
    node* todelete=head;
    head=head->next;
    delete todelete;
}

node* reverseRec(node* &head){
    if(head==NULL || head->next==NULL){
        return head;
    }
    node* newhead=reverseRec(head->next);
    head->next->next=head;
    head->next=NULL;
    return newhead;
}


void findMiddle(node* head){
    if(head==NULL) return;
    
    node* s=head;
    node* f=head;
    while(f!=NULL && f->next!=NULL){
        s=s->next;
        f=f->next->next;
    }
    cout<<s->data;
}

int main()
{
    node* head=NULL;
    insertAtTail(head,1);
    insertAtTail(head,2);
    insertAtTail(head,3);
    insertAtTail(head,4);
    insertAtTail(head,5);
    
   // diplay(head);
    cout<<endl;
    
    // node* newhead=reverseRec(head);
    // diplay(newhead);
    findMiddle(head);
    
  diplay(head);
    // cout<<search(head,1);
    //deletion(head,5);
    // deleteAtHead(head);
    // diplay(head);
    return 0;
}
