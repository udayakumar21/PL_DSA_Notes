#include <iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if (l1 == nullptr) return l2;
        if (l2 == nullptr) return l1;
        
        if (l1->val <= l2->val) {
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        } else {
            l2->next = mergeTwoLists(l2->next, l1);
            return l2;
        }
    }
};

// Helper function to print the linked list
void printList(ListNode* head) {
    while (head != nullptr) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

// Helper function to insert a new node at the end of the list
void insertAtTail(ListNode* &head, int val) {
    ListNode* newNode = new ListNode(val);
    if (head == nullptr) {
        head = newNode;
        return;
    }
    ListNode* temp = head;
    while (temp->next != nullptr) {
        temp = temp->next;
    }
    temp->next = newNode;
}

int main() {
    ListNode* l1 = nullptr;
    ListNode* l2 = nullptr;
    
    // List 1: 2 -> 4 -> 8 -> 10
    insertAtTail(l1, 2);
    insertAtTail(l1, 4);
    insertAtTail(l1, 8);
    insertAtTail(l1, 10);
    
    // List 2: 1 -> 3 -> 3 -> 6 -> 11 -> 14
    insertAtTail(l2, 1);
    insertAtTail(l2, 3);
    insertAtTail(l2, 3);
    insertAtTail(l2, 6);
    insertAtTail(l2, 11);
    insertAtTail(l2, 14);
    
    Solution solution;
    ListNode* mergedHead = solution.mergeTwoLists(l1, l2);
    
    cout << "Merged List: ";
    printList(mergedHead);

    return 0;
}
